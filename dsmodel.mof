// Translated Modelica model generated by Dymola from Modelica model 
//  ScalableTranslationStatistics.Fluid.Examples.ScalableHydraulics


// -----------------------------------------------------------------------------

// Initial Section
  numNLequations[1] := 2;
  numNLequations[2] := 5;
  numNLequations[3] := 3;
  numNLequations[4] := 4;
  numJacobians := 2;
  parallelResistors.nParallel := 4;
  numNLequationSystems := 4;
  numberNumericJacobians := 2;
  nLSystem[1].numNLequations := 2;
  nLSystem[1].withNumericJacobian := true;
  nLSystem[1].parallelResistors.nParallel := 2;
  nLSystem[2].numNLequations := 5;
  nLSystem[2].withNumericJacobian := true;
  nLSystem[2].parallelResistors.nParallel := 5;
  nLSystem[3].numNLequations := 3;
  nLSystem[3].withNumericJacobian := false;
  nLSystem[3].parallelResistors.nParallel := 3;
  insertJacobian[1] := true;
  insertJacobian[2] := true;
  insertJacobian[3] := false;
  boundary_Pressure.allow_massflow := true;
  pressureIncreasePump3.n := 100;
  realExpression.y := 100;
  nLSystem[1].volume.p := nLSystem[1].volume.p_start;
  nLSystem[2].volume.p := nLSystem[2].volume.p_start;
  nLSystem[3].volume.p := nLSystem[3].volume.p_start;
  nLSystem[2].volume.p := nLSystem[2].volume.p_start;

  // Linear system of equations
    // Symbolic solution
      /*  Original equation
       -8.31446261815324*(nLSystem[2].volume.T*nLSystem[2].volume.m)/
        nLSystem[2].volume.M =  -nLSystem[2].volume.p*nLSystem[2].volume.V;
      */
      nLSystem[2].volume.m := nLSystem[2].volume.p*nLSystem[2].volume.V*
        nLSystem[2].volume.M/(8.31446261815324*nLSystem[2].volume.T);

  // End of linear system of equations

  nLSystem[1].volume.p := nLSystem[1].volume.p_start;

  // Linear system of equations
    // Symbolic solution
      /*  Original equation
       -8.31446261815324*(nLSystem[1].volume.T*nLSystem[1].volume.m)/
        nLSystem[1].volume.M =  -nLSystem[1].volume.p*nLSystem[1].volume.V;
      */
      nLSystem[1].volume.m := nLSystem[1].volume.p*nLSystem[1].volume.V*
        nLSystem[1].volume.M/(8.31446261815324*nLSystem[1].volume.T);

  // End of linear system of equations

  nLSystem[3].volume.p := nLSystem[3].volume.p_start;

  // Linear system of equations
    // Symbolic solution
      /*  Original equation
       -8.31446261815324*(nLSystem[3].volume.T*nLSystem[3].volume.m)/
        nLSystem[3].volume.M =  -nLSystem[3].volume.p*nLSystem[3].volume.V;
      */
      nLSystem[3].volume.m := nLSystem[3].volume.p*nLSystem[3].volume.V*
        nLSystem[3].volume.M/(8.31446261815324*nLSystem[3].volume.T);

  // End of linear system of equations



// -----------------------------------------------------------------------------

// Dynamics Section

  // Linear system of equations
    // Symbolic solution
      /*  Original equation
      nLSystem[1].volume.V*nLSystem[1].volume.p = nLSystem[1].volume.m*
        8.31446261815324*nLSystem[1].volume.T/nLSystem[1].volume.M;
      */
      nLSystem[1].volume.p := nLSystem[1].volume.m*8.31446261815324*
        nLSystem[1].volume.T/nLSystem[1].volume.M/nLSystem[1].volume.V;

  // End of linear system of equations

  nLSystem[1].realExpression1.y := (if time < 0.5 then 50 else 100);

  // Linear system of equations
    // Symbolic solution
      /*  Original equation
      nLSystem[2].volume.V*nLSystem[2].volume.p = nLSystem[2].volume.m*
        8.31446261815324*nLSystem[2].volume.T/nLSystem[2].volume.M;
      */
      nLSystem[2].volume.p := nLSystem[2].volume.m*8.31446261815324*
        nLSystem[2].volume.T/nLSystem[2].volume.M/nLSystem[2].volume.V;

  // End of linear system of equations

  nLSystem[1].numeric_pump.vdot_nom := nLSystem[1].numeric_pump.mdot_nom/
    nLSystem.numeric_pump.CalcDensity_Unique2(nLSystem[1].volume.p);

  // Nonlinear system of equations
  // Tag: simulation.nonlinear[1]
    // It depends on the following parameters: 
    //   nLSystem[1].numeric_pump.delta_p_nom
    //   nLSystem[1].numeric_pump.n_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[1].delta_p_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[1].mdot_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[2].delta_p_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[2].mdot_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[3].delta_p_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[3].mdot_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[4].delta_p_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[4].mdot_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[5].delta_p_nom
    //   nLSystem[2].parallelResistors.pressureLossTube[5].mdot_nom
    // It depends on the following timevarying variables: 
    //   nLSystem[1].numeric_pump.vdot_nom
    //   nLSystem[1].realExpression1.y
    //   nLSystem[1].volume.p
    //   nLSystem[2].volume.p
    // Start values for iteration variables of non-linear system of 5 equations: 
    //   nLSystem[2].parallelResistors.pressureLossTube[5].mdot(start = 0.01)
    //   nLSystem[2].parallelResistors.pressureLossTube[4].mdot(start = 0.01)
    //   nLSystem[2].parallelResistors.pressureLossTube[3].mdot(start = 0.01)
    //   nLSystem[2].parallelResistors.pressureLossTube[2].mdot(start = 0.01)
    //   nLSystem[1].numeric_pump.vdot(start = 0.0)
  algorithm // Torn part
    nLSystem[1].numeric_pump.delta_p := (nLSystem[1].realExpression1.y/
      nLSystem[1].numeric_pump.n_nom)^2*(1-(nLSystem[1].numeric_pump.vdot*
      nLSystem[1].numeric_pump.n_nom/(nLSystem[1].numeric_pump.vdot_nom*
      nLSystem[1].realExpression1.y))^2)*nLSystem[1].numeric_pump.delta_p_nom;
    nLSystem[1].fluidPortOut.p := nLSystem[1].volume.p+nLSystem[1].numeric_pump.delta_p;
    nLSystem[2].parallelResistors.pressureLossTube[5].delta_p := 
      nLSystem[1].fluidPortOut.p-nLSystem[2].volume.p;
    nLSystem[2].parallelResistors.pressureLossTube[4].delta_p := 
      nLSystem[1].fluidPortOut.p-nLSystem[2].volume.p;
    nLSystem[2].parallelResistors.pressureLossTube[3].delta_p := 
      nLSystem[1].fluidPortOut.p-nLSystem[2].volume.p;
    nLSystem[2].parallelResistors.pressureLossTube[2].delta_p := 
      nLSystem[1].fluidPortOut.p-nLSystem[2].volume.p;
    nLSystem[1].fluidPortOut.m_flow :=  -nLSystem[1].numeric_pump.vdot*
      nLSystem.numeric_pump.CalcDensity_Unique2(nLSystem[1].fluidPortOut.p);
    nLSystem[2].parallelResistors.pressureLossTube[1].delta_p := 
      nLSystem[1].fluidPortOut.p-nLSystem[2].volume.p;
    nLSystem[2].parallelResistors.pressureLossTube[1].mdot :=  -(
      nLSystem[1].fluidPortOut.m_flow+nLSystem[2].parallelResistors.pressureLossTube[2].mdot
      +nLSystem[2].parallelResistors.pressureLossTube[3].mdot+nLSystem[2].parallelResistors.pressureLossTube[4].mdot
      +nLSystem[2].parallelResistors.pressureLossTube[5].mdot);

  equation // Residual equations
    0 = nLSystem[2].parallelResistors.pressureLossTube[1].delta_p/
      nLSystem[2].parallelResistors.pressureLossTube[1].delta_p_nom-(
      nLSystem[2].parallelResistors.pressureLossTube[1].mdot/nLSystem[2].parallelResistors.pressureLossTube[1].mdot_nom)
      ^3;
    0 = nLSystem[2].parallelResistors.pressureLossTube[2].delta_p/
      nLSystem[2].parallelResistors.pressureLossTube[2].delta_p_nom-(
      nLSystem[2].parallelResistors.pressureLossTube[2].mdot/nLSystem[2].parallelResistors.pressureLossTube[2].mdot_nom)
      ^3;
    0 = nLSystem[2].parallelResistors.pressureLossTube[3].delta_p/
      nLSystem[2].parallelResistors.pressureLossTube[3].delta_p_nom-(
      nLSystem[2].parallelResistors.pressureLossTube[3].mdot/nLSystem[2].parallelResistors.pressureLossTube[3].mdot_nom)
      ^3;
    0 = nLSystem[2].parallelResistors.pressureLossTube[4].delta_p/
      nLSystem[2].parallelResistors.pressureLossTube[4].delta_p_nom-(
      nLSystem[2].parallelResistors.pressureLossTube[4].mdot/nLSystem[2].parallelResistors.pressureLossTube[4].mdot_nom)
      ^3;
    0 = nLSystem[2].parallelResistors.pressureLossTube[5].delta_p/
      nLSystem[2].parallelResistors.pressureLossTube[5].delta_p_nom-(
      nLSystem[2].parallelResistors.pressureLossTube[5].mdot/nLSystem[2].parallelResistors.pressureLossTube[5].mdot_nom)
      ^3;
  // Numeric Jacobian is to be used.
  // End of nonlinear system of equations


  nLSystem[2].volume.fluidPortIn.m_flow := nLSystem[2].parallelResistors.pressureLossTube[1].mdot
    +nLSystem[2].parallelResistors.pressureLossTube[2].mdot+nLSystem[2].parallelResistors.pressureLossTube[3].mdot
    +nLSystem[2].parallelResistors.pressureLossTube[4].mdot+nLSystem[2].parallelResistors.pressureLossTube[5].mdot;
  nLSystem[2].realExpression1.y := (if time < 0.5 then 50 else 100);
  nLSystem[2].numeric_pump.vdot_nom := nLSystem[2].numeric_pump.mdot_nom/
    nLSystem.numeric_pump.CalcDensity_Unique2(nLSystem[2].volume.p);

  // Linear system of equations
    // Symbolic solution
      /*  Original equation
      nLSystem[3].volume.V*nLSystem[3].volume.p = nLSystem[3].volume.m*
        8.31446261815324*nLSystem[3].volume.T/nLSystem[3].volume.M;
      */
      nLSystem[3].volume.p := nLSystem[3].volume.m*8.31446261815324*
        nLSystem[3].volume.T/nLSystem[3].volume.M/nLSystem[3].volume.V;

  // End of linear system of equations


  // Nonlinear system of equations
  // Tag: simulation.nonlinear[2]
    // It depends on the following parameters: 
    //   nLSystem[2].numeric_pump.delta_p_nom
    //   nLSystem[2].numeric_pump.n_nom
    //   nLSystem[3].parallelResistors.pressureLossTube[1].delta_p_nom
    //   nLSystem[3].parallelResistors.pressureLossTube[1].mdot_nom
    //   nLSystem[3].parallelResistors.pressureLossTube[2].delta_p_nom
    //   nLSystem[3].parallelResistors.pressureLossTube[2].mdot_nom
    //   nLSystem[3].parallelResistors.pressureLossTube[3].delta_p_nom
    //   nLSystem[3].parallelResistors.pressureLossTube[3].mdot_nom
    // It depends on the following timevarying variables: 
    //   nLSystem[2].numeric_pump.vdot_nom
    //   nLSystem[2].realExpression1.y
    //   nLSystem[2].volume.p
    //   nLSystem[3].volume.p
    // Start values for iteration variables of non-linear system of 3 equations: 
    //   nLSystem[3].parallelResistors.pressureLossTube[3].mdot(start = 0.01)
    //   nLSystem[3].parallelResistors.pressureLossTube[2].mdot(start = 0.01)
    //   nLSystem[2].numeric_pump.vdot(start = 0.0)
  algorithm // Torn part
    nLSystem[2].numeric_pump.delta_p := (nLSystem[2].realExpression1.y/
      nLSystem[2].numeric_pump.n_nom)^2*(1-(nLSystem[2].numeric_pump.vdot*
      nLSystem[2].numeric_pump.n_nom/(nLSystem[2].numeric_pump.vdot_nom*
      nLSystem[2].realExpression1.y))^2)*nLSystem[2].numeric_pump.delta_p_nom;
    nLSystem[2].fluidPortOut.p := nLSystem[2].volume.p+nLSystem[2].numeric_pump.delta_p;
    nLSystem[3].parallelResistors.pressureLossTube[3].delta_p := 
      nLSystem[2].fluidPortOut.p-nLSystem[3].volume.p;
    nLSystem[3].parallelResistors.pressureLossTube[2].delta_p := 
      nLSystem[2].fluidPortOut.p-nLSystem[3].volume.p;
    nLSystem[3].parallelResistors.pressureLossTube[1].delta_p := 
      nLSystem[2].fluidPortOut.p-nLSystem[3].volume.p;
    nLSystem[2].fluidPortOut.m_flow :=  -nLSystem[2].numeric_pump.vdot*
      nLSystem.numeric_pump.CalcDensity_Unique2(nLSystem[2].fluidPortOut.p);
    nLSystem[3].parallelResistors.pressureLossTube[1].mdot :=  -(
      nLSystem[2].fluidPortOut.m_flow+nLSystem[3].parallelResistors.pressureLossTube[2].mdot
      +nLSystem[3].parallelResistors.pressureLossTube[3].mdot);

  equation // Residual equations
    0 = nLSystem[3].parallelResistors.pressureLossTube[1].delta_p/
      nLSystem[3].parallelResistors.pressureLossTube[1].delta_p_nom-(
      nLSystem[3].parallelResistors.pressureLossTube[1].mdot/nLSystem[3].parallelResistors.pressureLossTube[1].mdot_nom)
      ^3;
    0 = nLSystem[3].parallelResistors.pressureLossTube[2].delta_p/
      nLSystem[3].parallelResistors.pressureLossTube[2].delta_p_nom-(
      nLSystem[3].parallelResistors.pressureLossTube[2].mdot/nLSystem[3].parallelResistors.pressureLossTube[2].mdot_nom)
      ^3;
    0 = nLSystem[3].parallelResistors.pressureLossTube[3].delta_p/
      nLSystem[3].parallelResistors.pressureLossTube[3].delta_p_nom-(
      nLSystem[3].parallelResistors.pressureLossTube[3].mdot/nLSystem[3].parallelResistors.pressureLossTube[3].mdot_nom)
      ^3;
  // Numeric Jacobian is to be used.
  // End of nonlinear system of equations


  der(nLSystem[2].volume.m) := nLSystem[2].volume.fluidPortIn.m_flow+
    nLSystem[2].fluidPortOut.m_flow;

  // Nonlinear system of equations
  // Tag: simulation.nonlinear[3]
    // It depends on the following parameters: 
    //   boundary_Pressure.p
    //   nLSystem[1].parallelResistors.pressureLossTube[1].delta_p_nom
    //   nLSystem[1].parallelResistors.pressureLossTube[1].mdot_nom
    //   nLSystem[1].parallelResistors.pressureLossTube[2].delta_p_nom
    //   nLSystem[1].parallelResistors.pressureLossTube[2].mdot_nom
    //   pressureIncreasePump3.delta_p_nom
    //   pressureIncreasePump3.mdot_nom
    //   pressureIncreasePump3.n_nom
    // It depends on the following timevarying variables: 
    //   nLSystem[1].volume.p
    // Start values for iteration variables of non-linear system of 2 equations: 
    //   nLSystem[1].parallelResistors.pressureLossTube[2].mdot(start = 0.01)
    //   nLSystem[1].parallelResistors.pressureLossTube[1].mdot(start = 0.01)
  algorithm // Torn part
    pressureIncreasePump3.mdot := nLSystem[1].parallelResistors.pressureLossTube[1].mdot
      +nLSystem[1].parallelResistors.pressureLossTube[2].mdot;
    pressureIncreasePump3.delta_p := (100/pressureIncreasePump3.n_nom)^2*(1-(
      pressureIncreasePump3.mdot*pressureIncreasePump3.n_nom/(100*
      pressureIncreasePump3.mdot_nom))^2)*pressureIncreasePump3.delta_p_nom;
    nLSystem[1].parallelResistors.pressureLossTube[1].delta_p := 
      boundary_Pressure.p-nLSystem[1].volume.p+pressureIncreasePump3.delta_p;
    nLSystem[1].parallelResistors.pressureLossTube[2].delta_p := (
      nLSystem[1].parallelResistors.pressureLossTube[2].mdot/nLSystem[1].parallelResistors.pressureLossTube[2].mdot_nom)
      ^3*nLSystem[1].parallelResistors.pressureLossTube[2].delta_p_nom;

  equation // Residual equations
    0 = nLSystem[1].parallelResistors.pressureLossTube[2].delta_p-(
      boundary_Pressure.p-nLSystem[1].volume.p+pressureIncreasePump3.delta_p);
    0 = nLSystem[1].parallelResistors.pressureLossTube[1].delta_p/
      nLSystem[1].parallelResistors.pressureLossTube[1].delta_p_nom-(
      nLSystem[1].parallelResistors.pressureLossTube[1].mdot/nLSystem[1].parallelResistors.pressureLossTube[1].mdot_nom)
      ^3;
  // Analytic Jacobian was produced, but it is not listed here.
  // To have it listed, set
  //   Advanced.OutputModelicaCodeWithJacobians = true
  // before translation. May give much output,
  // because common subexpression elimination is not activated.
  // End of nonlinear system of equations


  pressureIncreasePump3.fluidPortOut.p := nLSystem[1].volume.p+nLSystem[1].parallelResistors.pressureLossTube[2].delta_p;
  nLSystem[1].volume.fluidPortIn.m_flow := nLSystem[1].parallelResistors.pressureLossTube[1].mdot
    +nLSystem[1].parallelResistors.pressureLossTube[2].mdot;
  der(nLSystem[1].volume.m) := nLSystem[1].volume.fluidPortIn.m_flow+
    nLSystem[1].fluidPortOut.m_flow;
  nLSystem[3].volume.fluidPortIn.m_flow := nLSystem[3].parallelResistors.pressureLossTube[1].mdot
    +nLSystem[3].parallelResistors.pressureLossTube[2].mdot+nLSystem[3].parallelResistors.pressureLossTube[3].mdot;
  nLSystem[3].realExpression1.y := (if time < 0.5 then 50 else 100);

  // Nonlinear system of equations
  // Tag: simulation.nonlinear[4]
    // It depends on the following parameters: 
    //   boundary_Pressure.p
    //   nLSystem[3].analytic_pump.delta_p_nom
    //   nLSystem[3].analytic_pump.mdot_nom
    //   nLSystem[3].analytic_pump.n_nom
    //   parallelResistors.pressureLossTube[1].delta_p_nom
    //   parallelResistors.pressureLossTube[1].mdot_nom
    //   parallelResistors.pressureLossTube[2].delta_p_nom
    //   parallelResistors.pressureLossTube[2].mdot_nom
    //   parallelResistors.pressureLossTube[3].delta_p_nom
    //   parallelResistors.pressureLossTube[3].mdot_nom
    //   parallelResistors.pressureLossTube[4].delta_p_nom
    //   parallelResistors.pressureLossTube[4].mdot_nom
    // It depends on the following timevarying variables: 
    //   nLSystem[3].realExpression1.y
    //   nLSystem[3].volume.p
    // Start values for iteration variables of non-linear system of 4 equations: 
    //   parallelResistors.pressureLossTube[4].mdot(start = 0.01)
    //   parallelResistors.pressureLossTube[3].mdot(start = 0.01)
    //   parallelResistors.pressureLossTube[2].mdot(start = 0.01)
    //   parallelResistors.pressureLossTube[1].mdot(start = 0.01)
  algorithm // Torn part
    parallelResistors.fluidPortIn.m_flow := parallelResistors.pressureLossTube[1].mdot
      +parallelResistors.pressureLossTube[2].mdot+parallelResistors.pressureLossTube[3].mdot
      +parallelResistors.pressureLossTube[4].mdot;
    parallelResistors.pressureLossTube[1].delta_p := (parallelResistors.pressureLossTube[1].mdot
      /parallelResistors.pressureLossTube[1].mdot_nom)^3*parallelResistors.pressureLossTube[1].delta_p_nom;
    parallelResistors.pressureLossTube[2].delta_p := (parallelResistors.pressureLossTube[2].mdot
      /parallelResistors.pressureLossTube[2].mdot_nom)^3*parallelResistors.pressureLossTube[2].delta_p_nom;
    nLSystem[3].analytic_pump.delta_p := parallelResistors.pressureLossTube[2].delta_p
      -nLSystem[3].volume.p+boundary_Pressure.p;

  equation // Residual equations
    0 = parallelResistors.pressureLossTube[1].delta_p-(nLSystem[3].volume.p-
      boundary_Pressure.p+nLSystem[3].analytic_pump.delta_p);
    0 = parallelResistors.pressureLossTube[2].delta_p/parallelResistors.pressureLossTube[3].delta_p_nom
      -(parallelResistors.pressureLossTube[3].mdot/parallelResistors.pressureLossTube[3].mdot_nom)
      ^3;
    0 = parallelResistors.pressureLossTube[2].delta_p/parallelResistors.pressureLossTube[4].delta_p_nom
      -(parallelResistors.pressureLossTube[4].mdot/parallelResistors.pressureLossTube[4].mdot_nom)
      ^3;
    0 = nLSystem[3].analytic_pump.delta_p/nLSystem[3].analytic_pump.delta_p_nom-
      (nLSystem[3].realExpression1.y/nLSystem[3].analytic_pump.n_nom)^2*(1-(
      parallelResistors.fluidPortIn.m_flow*nLSystem[3].analytic_pump.n_nom/(
      nLSystem[3].analytic_pump.mdot_nom*nLSystem[3].realExpression1.y))^2);
  // Analytic Jacobian was produced, but it is not listed here.
  // To have it listed, set
  //   Advanced.OutputModelicaCodeWithJacobians = true
  // before translation. May give much output,
  // because common subexpression elimination is not activated.
  // End of nonlinear system of equations


  parallelResistors.pressureLossTube[3].delta_p := parallelResistors.pressureLossTube[2].delta_p;
  parallelResistors.pressureLossTube[4].delta_p := parallelResistors.pressureLossTube[2].delta_p;
  parallelResistors.fluidPortIn.p := boundary_Pressure.p+parallelResistors.pressureLossTube[4].delta_p;
  der(nLSystem[3].volume.m) := nLSystem[3].volume.fluidPortIn.m_flow-
    parallelResistors.fluidPortIn.m_flow;


// -----------------------------------------------------------------------------

// Conditionally Accepted Section
  parallelResistors.fluidPortOut.m_flow :=  -(parallelResistors.pressureLossTube[1].mdot
    +parallelResistors.pressureLossTube[2].mdot+parallelResistors.pressureLossTube[3].mdot
    +parallelResistors.pressureLossTube[4].mdot);
  boundary_Pressure.fluidPortOut.m_flow :=  -(parallelResistors.fluidPortOut.m_flow
    +pressureIncreasePump3.mdot);

// -----------------------------------------------------------------------------

// Eliminated alias variables
  // To have eliminated alias variables listed, set
  //   Advanced.OutputModelicaCodeWithAliasVariables = true
  // before translation. May give much output.
