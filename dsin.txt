#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       1                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       3                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
  2.6214400000000000E+05   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 1                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(155,61)
numNLequations[1]
numNLequations[2]
numNLequations[3]
numNLequations[4]
numJacobians
parallelResistors.nParallel
parallelResistors.pressureLossTube[1].delta_p
parallelResistors.pressureLossTube[1].mdot
parallelResistors.pressureLossTube[1].delta_p_nom
parallelResistors.pressureLossTube[1].mdot_nom
parallelResistors.pressureLossTube[2].delta_p
parallelResistors.pressureLossTube[2].mdot
parallelResistors.pressureLossTube[2].delta_p_nom
parallelResistors.pressureLossTube[2].mdot_nom
parallelResistors.pressureLossTube[3].delta_p
parallelResistors.pressureLossTube[3].mdot
parallelResistors.pressureLossTube[3].delta_p_nom
parallelResistors.pressureLossTube[3].mdot_nom
parallelResistors.pressureLossTube[4].delta_p
parallelResistors.pressureLossTube[4].mdot
parallelResistors.pressureLossTube[4].delta_p_nom
parallelResistors.pressureLossTube[4].mdot_nom
parallelResistors.fluidPortOut.m_flow
parallelResistors.fluidPortIn.p
parallelResistors.fluidPortIn.m_flow
realExpression.y
pressureIncreasePump3.delta_p
pressureIncreasePump3.mdot
pressureIncreasePump3.delta_p_nom
pressureIncreasePump3.mdot_nom
pressureIncreasePump3.n_nom
pressureIncreasePump3.fluidPortOut.p
pressureIncreasePump3.n
boundary_Pressure.p
boundary_Pressure.allow_massflow
boundary_Pressure.fluidPortOut.m_flow
numNLequationSystems
numberNumericJacobians
insertJacobian[1]
insertJacobian[2]
insertJacobian[3]
nLSystem[1].numNLequations
nLSystem[1].withNumericJacobian
nLSystem[1].volume.V
nLSystem[1].volume.m
nLSystem[1].volume.der(m)
nLSystem[1].volume.p
nLSystem[1].volume.p_start
nLSystem[1].volume.T
nLSystem[1].volume.M
nLSystem[1].volume.fluidPortIn.m_flow
nLSystem[1].numeric_pump.delta_p
nLSystem[1].numeric_pump.vdot
nLSystem[1].numeric_pump.delta_p_nom
nLSystem[1].numeric_pump.mdot_nom
nLSystem[1].numeric_pump.vdot_nom
nLSystem[1].numeric_pump.n_nom
nLSystem[1].realExpression1.y
nLSystem[1].fluidPortOut.p
nLSystem[1].fluidPortOut.m_flow
nLSystem[1].parallelResistors.nParallel
nLSystem[1].parallelResistors.pressureLossTube[1].delta_p
nLSystem[1].parallelResistors.pressureLossTube[1].mdot
nLSystem[1].parallelResistors.pressureLossTube[1].delta_p_nom
nLSystem[1].parallelResistors.pressureLossTube[1].mdot_nom
nLSystem[1].parallelResistors.pressureLossTube[2].delta_p
nLSystem[1].parallelResistors.pressureLossTube[2].mdot
nLSystem[1].parallelResistors.pressureLossTube[2].delta_p_nom
nLSystem[1].parallelResistors.pressureLossTube[2].mdot_nom
nLSystem[2].numNLequations
nLSystem[2].withNumericJacobian
nLSystem[2].volume.V
nLSystem[2].volume.m
nLSystem[2].volume.der(m)
nLSystem[2].volume.p
nLSystem[2].volume.p_start
nLSystem[2].volume.T
nLSystem[2].volume.M
nLSystem[2].volume.fluidPortIn.m_flow
nLSystem[2].numeric_pump.delta_p
nLSystem[2].numeric_pump.vdot
nLSystem[2].numeric_pump.delta_p_nom
nLSystem[2].numeric_pump.mdot_nom
nLSystem[2].numeric_pump.vdot_nom
nLSystem[2].numeric_pump.n_nom
nLSystem[2].realExpression1.y
nLSystem[2].fluidPortOut.p
nLSystem[2].fluidPortOut.m_flow
nLSystem[2].parallelResistors.nParallel
nLSystem[2].parallelResistors.pressureLossTube[1].delta_p
nLSystem[2].parallelResistors.pressureLossTube[1].mdot
nLSystem[2].parallelResistors.pressureLossTube[1].delta_p_nom
nLSystem[2].parallelResistors.pressureLossTube[1].mdot_nom
nLSystem[2].parallelResistors.pressureLossTube[2].delta_p
nLSystem[2].parallelResistors.pressureLossTube[2].mdot
nLSystem[2].parallelResistors.pressureLossTube[2].delta_p_nom
nLSystem[2].parallelResistors.pressureLossTube[2].mdot_nom
nLSystem[2].parallelResistors.pressureLossTube[3].delta_p
nLSystem[2].parallelResistors.pressureLossTube[3].mdot
nLSystem[2].parallelResistors.pressureLossTube[3].delta_p_nom
nLSystem[2].parallelResistors.pressureLossTube[3].mdot_nom
nLSystem[2].parallelResistors.pressureLossTube[4].delta_p
nLSystem[2].parallelResistors.pressureLossTube[4].mdot
nLSystem[2].parallelResistors.pressureLossTube[4].delta_p_nom
nLSystem[2].parallelResistors.pressureLossTube[4].mdot_nom
nLSystem[2].parallelResistors.pressureLossTube[5].delta_p
nLSystem[2].parallelResistors.pressureLossTube[5].mdot
nLSystem[2].parallelResistors.pressureLossTube[5].delta_p_nom
nLSystem[2].parallelResistors.pressureLossTube[5].mdot_nom
nLSystem[3].numNLequations
nLSystem[3].withNumericJacobian
nLSystem[3].volume.V
nLSystem[3].volume.m
nLSystem[3].volume.der(m)
nLSystem[3].volume.p
nLSystem[3].volume.p_start
nLSystem[3].volume.T
nLSystem[3].volume.M
nLSystem[3].volume.fluidPortIn.m_flow
nLSystem[3].analytic_pump.delta_p
nLSystem[3].analytic_pump.delta_p_nom
nLSystem[3].analytic_pump.mdot_nom
nLSystem[3].analytic_pump.n_nom
nLSystem[3].realExpression1.y
nLSystem[3].parallelResistors.nParallel
nLSystem[3].parallelResistors.pressureLossTube[1].delta_p
nLSystem[3].parallelResistors.pressureLossTube[1].mdot
nLSystem[3].parallelResistors.pressureLossTube[1].delta_p_nom
nLSystem[3].parallelResistors.pressureLossTube[1].mdot_nom
nLSystem[3].parallelResistors.pressureLossTube[2].delta_p
nLSystem[3].parallelResistors.pressureLossTube[2].mdot
nLSystem[3].parallelResistors.pressureLossTube[2].delta_p_nom
nLSystem[3].parallelResistors.pressureLossTube[2].mdot_nom
nLSystem[3].parallelResistors.pressureLossTube[3].delta_p
nLSystem[3].parallelResistors.pressureLossTube[3].mdot
nLSystem[3].parallelResistors.pressureLossTube[3].delta_p_nom
nLSystem[3].parallelResistors.pressureLossTube[3].mdot_nom
CPUtime
EventCounter
NonlinearSystems.simulation[1].Calls
NonlinearSystems.simulation[1].Residues
NonlinearSystems.simulation[1].Iterations
NonlinearSystems.simulation[1].Jacobians
NonlinearSystems.simulation[2].Calls
NonlinearSystems.simulation[2].Residues
NonlinearSystems.simulation[2].Iterations
NonlinearSystems.simulation[2].Jacobians
NonlinearSystems.simulation[3].Calls
NonlinearSystems.simulation[3].Residues
NonlinearSystems.simulation[3].Iterations
NonlinearSystems.simulation[3].Jacobians
NonlinearSystems.simulation[4].Calls
NonlinearSystems.simulation[4].Residues
NonlinearSystems.simulation[4].Iterations
NonlinearSystems.simulation[4].Jacobians

double initialValue(155,6)
  0       2                  0       0                  6   258   # numNLequations[1]
  0       5                  0       0                  6   258   # numNLequations[2]
  0       3                  0       0                  6   258   # numNLequations[3]
  0       4                  0       0                  6   258   # numNLequations[4]
  0       2                  0       0                  6   258   # numJacobians
  0       4                  0       0                  6   258   # parallelResistors.nParallel
  0       0                  0       0                  6   256   # parallelResistors.pressureLossTube[1].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # parallelResistors.pressureLossTube[1].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # parallelResistors.pressureLossTube[1].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # parallelResistors.pressureLossTube[1].mdot_nom
  0       0                  0       0                  6   256   # parallelResistors.pressureLossTube[2].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # parallelResistors.pressureLossTube[2].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # parallelResistors.pressureLossTube[2].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # parallelResistors.pressureLossTube[2].mdot_nom
  0       0                  0       0                  6   256   # parallelResistors.pressureLossTube[3].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # parallelResistors.pressureLossTube[3].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # parallelResistors.pressureLossTube[3].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # parallelResistors.pressureLossTube[3].mdot_nom
  0       0                  0       0                  6   256   # parallelResistors.pressureLossTube[4].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # parallelResistors.pressureLossTube[4].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # parallelResistors.pressureLossTube[4].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # parallelResistors.pressureLossTube[4].mdot_nom
  0       0                  0       0                  6   388   # parallelResistors.fluidPortOut.m_flow
  0       0                  0 1.7976931348623157E+308  6   260   # parallelResistors.fluidPortIn.p
  0       0                  0       0                  6   388   # parallelResistors.fluidPortIn.m_flow
  0     100                  0       0                  6   256   # realExpression.y
  0       0                  0       0                  6   256   # pressureIncreasePump3.delta_p
  0       0                  0       0                  6   256   # pressureIncreasePump3.mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # pressureIncreasePump3.delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # pressureIncreasePump3.mdot_nom
 -1      10                  0       0                  1   280   # pressureIncreasePump3.n_nom
  0       0                  0 1.7976931348623157E+308  6   260   # pressureIncreasePump3.fluidPortOut.p
  0     100                  0       0                  6   256   # pressureIncreasePump3.n
 -1  1.0130000000000000E+05  0 1.7976931348623157E+308  1   280   # boundary_Pressure.p
  0       1                  0       0                  6   257   # boundary_Pressure.allow_massflow
  0       0                  0       0                  6   388   # boundary_Pressure.fluidPortOut.m_flow
  0       4                  0       0                  6  1282   # numNLequationSystems
  0       2                  0       0                  6  1282   # numberNumericJacobians
  0       1                  0       0                  6  1281   # insertJacobian[1]
  0       1                  0       0                  6  1281   # insertJacobian[2]
  0       0                  0       0                  6  1281   # insertJacobian[3]
  0       2                  0       0                  6   258   # nLSystem[1].numNLequations
  0       1                  0       0                  6   257   # nLSystem[1].withNumericJacobian
 -1       1                  0       0                  1   280   # nLSystem[1].volume.V
 -1       0                  0 1.7976931348623157E+308  2   272   # nLSystem[1].volume.m
  0       0                  0       0                  3   256   # nLSystem[1].volume.der(m)
  0       0                  0 1.7976931348623157E+308  6   256   # nLSystem[1].volume.p
 -1  1.0130000000000000E+05  0       0                  1   280   # nLSystem[1].volume.p_start
 -1  2.9814999999999998E+02  0 1.7976931348623157E+308  1   280   # nLSystem[1].volume.T
 -1  2.8964000000000000E-02  0       0                  1   280   # nLSystem[1].volume.M
  0       0                  0       0                  6   388   # nLSystem[1].volume.fluidPortIn.m_flow
  0       0                  0       0                  6   256   # nLSystem[1].numeric_pump.delta_p
  0       0                  0       0                  6   288   # nLSystem[1].numeric_pump.vdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[1].numeric_pump.delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[1].numeric_pump.mdot_nom
  0       0                  0       0                  6   256   # nLSystem[1].numeric_pump.vdot_nom
 -1      10                  0       0                  1   280   # nLSystem[1].numeric_pump.n_nom
  0       0                  0       0                  6   320   # nLSystem[1].realExpression1.y
  0       0                  0 1.7976931348623157E+308  6   260   # nLSystem[1].fluidPortOut.p
  0       0                  0       0                  6   388   # nLSystem[1].fluidPortOut.m_flow
  0       2                  0       0                  6   258   # nLSystem[1].parallelResistors.nParallel
  0       0                  0       0                  6   256   # nLSystem[1].parallelResistors.pressureLossTube[1].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[1].parallelResistors.pressureLossTube[1].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[1].parallelResistors.pressureLossTube[1].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[1].parallelResistors.pressureLossTube[1].mdot_nom
  0       0                  0       0                  6   256   # nLSystem[1].parallelResistors.pressureLossTube[2].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[1].parallelResistors.pressureLossTube[2].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[1].parallelResistors.pressureLossTube[2].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[1].parallelResistors.pressureLossTube[2].mdot_nom
  0       5                  0       0                  6   258   # nLSystem[2].numNLequations
  0       1                  0       0                  6   257   # nLSystem[2].withNumericJacobian
 -1       1                  0       0                  1   280   # nLSystem[2].volume.V
 -1       0                  0 1.7976931348623157E+308  2   272   # nLSystem[2].volume.m
  0       0                  0       0                  3   256   # nLSystem[2].volume.der(m)
  0       0                  0 1.7976931348623157E+308  6   256   # nLSystem[2].volume.p
 -1  1.0130000000000000E+05  0       0                  1   280   # nLSystem[2].volume.p_start
 -1  2.9814999999999998E+02  0 1.7976931348623157E+308  1   280   # nLSystem[2].volume.T
 -1  2.8964000000000000E-02  0       0                  1   280   # nLSystem[2].volume.M
  0       0                  0       0                  6   388   # nLSystem[2].volume.fluidPortIn.m_flow
  0       0                  0       0                  6   256   # nLSystem[2].numeric_pump.delta_p
  0       0                  0       0                  6   288   # nLSystem[2].numeric_pump.vdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[2].numeric_pump.delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[2].numeric_pump.mdot_nom
  0       0                  0       0                  6   256   # nLSystem[2].numeric_pump.vdot_nom
 -1      10                  0       0                  1   280   # nLSystem[2].numeric_pump.n_nom
  0       0                  0       0                  6   320   # nLSystem[2].realExpression1.y
  0       0                  0 1.7976931348623157E+308  6   260   # nLSystem[2].fluidPortOut.p
  0       0                  0       0                  6   388   # nLSystem[2].fluidPortOut.m_flow
  0       5                  0       0                  6   258   # nLSystem[2].parallelResistors.nParallel
  0       0                  0       0                  6   256   # nLSystem[2].parallelResistors.pressureLossTube[1].delta_p
  0  1.0000000000000000E-02  0       0                  6   256   # nLSystem[2].parallelResistors.pressureLossTube[1].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[1].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[1].mdot_nom
  0       0                  0       0                  6   256   # nLSystem[2].parallelResistors.pressureLossTube[2].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[2].parallelResistors.pressureLossTube[2].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[2].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[2].mdot_nom
  0       0                  0       0                  6   256   # nLSystem[2].parallelResistors.pressureLossTube[3].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[2].parallelResistors.pressureLossTube[3].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[3].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[3].mdot_nom
  0       0                  0       0                  6   256   # nLSystem[2].parallelResistors.pressureLossTube[4].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[2].parallelResistors.pressureLossTube[4].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[4].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[4].mdot_nom
  0       0                  0       0                  6   256   # nLSystem[2].parallelResistors.pressureLossTube[5].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[2].parallelResistors.pressureLossTube[5].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[5].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[2].parallelResistors.pressureLossTube[5].mdot_nom
  0       3                  0       0                  6   258   # nLSystem[3].numNLequations
  0       0                  0       0                  6   257   # nLSystem[3].withNumericJacobian
 -1       1                  0       0                  1   280   # nLSystem[3].volume.V
 -1       0                  0 1.7976931348623157E+308  2   272   # nLSystem[3].volume.m
  0       0                  0       0                  3   256   # nLSystem[3].volume.der(m)
  0       0                  0 1.7976931348623157E+308  6   256   # nLSystem[3].volume.p
 -1  1.0130000000000000E+05  0       0                  1   280   # nLSystem[3].volume.p_start
 -1  2.9814999999999998E+02  0 1.7976931348623157E+308  1   280   # nLSystem[3].volume.T
 -1  2.8964000000000000E-02  0       0                  1   280   # nLSystem[3].volume.M
  0       0                  0       0                  6   388   # nLSystem[3].volume.fluidPortIn.m_flow
  0       0                  0       0                  6   256   # nLSystem[3].analytic_pump.delta_p
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[3].analytic_pump.delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[3].analytic_pump.mdot_nom
 -1      10                  0       0                  1   280   # nLSystem[3].analytic_pump.n_nom
  0       0                  0       0                  6   320   # nLSystem[3].realExpression1.y
  0       3                  0       0                  6   258   # nLSystem[3].parallelResistors.nParallel
  0       0                  0       0                  6   256   # nLSystem[3].parallelResistors.pressureLossTube[1].delta_p
  0  1.0000000000000000E-02  0       0                  6   256   # nLSystem[3].parallelResistors.pressureLossTube[1].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[3].parallelResistors.pressureLossTube[1].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[3].parallelResistors.pressureLossTube[1].mdot_nom
  0       0                  0       0                  6   256   # nLSystem[3].parallelResistors.pressureLossTube[2].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[3].parallelResistors.pressureLossTube[2].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[3].parallelResistors.pressureLossTube[2].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[3].parallelResistors.pressureLossTube[2].mdot_nom
  0       0                  0       0                  6   256   # nLSystem[3].parallelResistors.pressureLossTube[3].delta_p
  0  1.0000000000000000E-02  0       0                  6   288   # nLSystem[3].parallelResistors.pressureLossTube[3].mdot
 -1  2.0000000000000000E+05  0       0                  1   280   # nLSystem[3].parallelResistors.pressureLossTube[3].delta_p_nom
 -1  5.0000000000000000E-01  0       0                  1   280   # nLSystem[3].parallelResistors.pressureLossTube[3].mdot_nom
  0       0                  0       0                  4   256   # CPUtime
  0       0                  0       0                  4   256   # EventCounter
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[1].Calls
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[1].Residues
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[1].Iterations
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[1].Jacobians
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[2].Calls
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[2].Residues
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[2].Iterations
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[2].Jacobians
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[3].Calls
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[3].Residues
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[3].Iterations
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[3].Jacobians
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[4].Calls
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[4].Residues
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[4].Iterations
  0       0                  0       0                  6   256   # NonlinearSystems.simulation[4].Jacobians


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, the initialization is performed in the normal way.
#
# - If parameters and inputs are FIXED, and all other variables
#   have special case for continue (-2 in 1st column), or FREE
#   the initialization is ignored and variables are set to these values.
#   This is intended to continue the simulation.
#
#   Which variables will be important for initialization and continue
#   is indicated by value in column 6 & dsStartMasks.
#
char initialDescription(155,114)
sizes of each nonlinear system of equations [:#(type=Integer)]
sizes of each nonlinear system of equations [:#(type=Integer)]
sizes of each nonlinear system of equations [:#(type=Integer)]
sizes of each nonlinear system of equations [:#(type=Integer)]
number of numerical Jacobians to be inserted (maximum: number of nonlinear equation systems -1) [:#(type=Integer)]
[:#(type=Integer)]
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
Mass flow rate from the connection point into the component [kg/s]
Thermodynamic pressure in the connection point [Pa|bar]
Mass flow rate from the connection point into the component [kg/s]
Value of Real output
pressure difference between inlet and outlet [Pa]
mass flow through pump [kg/s]
nominal pressure increase in pump
nominal mass flow art nominal pressure increase
nominal rotational speed
Thermodynamic pressure in the connection point [Pa|bar]
rotational speed of pump
pressure boundary value [Pa|bar]
is mass flow allowed across the boundary [:#(type=Boolean)]
Mass flow rate from the connection point into the component [kg/s]
[:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Integer)]
[:#(type=Boolean)]
Volume [m3]
mass of Medium in Volume [kg]
der(mass of Medium in Volume) [kg/s]
pressure of volume [Pa|bar]
initial pressure [Pa|bar]
fixed Temperature [K|degC]
molar mass of medium (value for air)
Mass flow rate from the connection point into the component [kg/s]
pressure difference between inlet and outlet [Pa]
volume flow through pump
nominal pressure increase in pump
nominal mass flow art nominal pressure increase
nominal volume flow
nominal rotational speed
Value of Real output
Thermodynamic pressure in the connection point [Pa|bar]
Mass flow rate from the connection point into the component [kg/s]
[:#(type=Integer)]
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
[:#(type=Integer)]
[:#(type=Boolean)]
Volume [m3]
mass of Medium in Volume [kg]
der(mass of Medium in Volume) [kg/s]
pressure of volume [Pa|bar]
initial pressure [Pa|bar]
fixed Temperature [K|degC]
molar mass of medium (value for air)
Mass flow rate from the connection point into the component [kg/s]
pressure difference between inlet and outlet [Pa]
volume flow through pump
nominal pressure increase in pump
nominal mass flow art nominal pressure increase
nominal volume flow
nominal rotational speed
Value of Real output
Thermodynamic pressure in the connection point [Pa|bar]
Mass flow rate from the connection point into the component [kg/s]
[:#(type=Integer)]
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
[:#(type=Integer)]
[:#(type=Boolean)]
Volume [m3]
mass of Medium in Volume [kg]
der(mass of Medium in Volume) [kg/s]
pressure of volume [Pa|bar]
initial pressure [Pa|bar]
fixed Temperature [K|degC]
molar mass of medium (value for air)
Mass flow rate from the connection point into the component [kg/s]
pressure difference between inlet and outlet [Pa]
nominal pressure increase in pump
nominal mass flow art nominal pressure increase
nominal rotational speed
Value of Real output
[:#(type=Integer)]
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
pressure drop in tube [Pa]
mass flow rate [kg/s]
pressure drop at nominal mass flow
nominal mass flow
[s]

Number of calls to solve this system
Number of evaluations of the system residual
Number of iterations performed to solve this system
Number of evaluations of the analytic system Jacobian
Number of calls to solve this system
Number of evaluations of the system residual
Number of iterations performed to solve this system
Number of evaluations of the analytic system Jacobian
Number of calls to solve this system
Number of evaluations of the system residual
Number of iterations performed to solve this system
Number of evaluations of the analytic system Jacobian
Number of calls to solve this system
Number of evaluations of the system residual
Number of iterations performed to solve this system
Number of evaluations of the analytic system Jacobian

